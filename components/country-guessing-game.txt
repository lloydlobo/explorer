import { Button } from "@/components/ui/button";
import {
  Command,
  CommandDialog,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
  CommandSeparator,
  CommandShortcut,
} from "@/components/ui/command";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Heading } from "@/components/ui/typography";
import { useToast } from "@/lib/hooks/ui/use-toast";
import { ICountry } from "@/lib/types/types-country";
import { cn } from "@/lib/utils";
import { AspectRatio } from "@radix-ui/react-aspect-ratio";
import produce from "immer";
import { atom, useAtom } from "jotai";
import { Check, ChevronsUpDown, SearchIcon } from "lucide-react";
import Image from "next/image";
import React, { useEffect, useState } from "react";

const MAX_TRIES = 6;

/** `GameState` enum defines the possible states of the game.
 *
 * @enum {number} */
enum GameState {
  Running,
  Won,
  Lost,
  Canceled,
}

/** `gameStateAtom` is the global state of the game. */
// PrimitiveAtom  is a type of atom that can only be set and read from outside the component.
const gameStateAtom = atom({
  countries: [] as ICountry[],
  triesRemaining: MAX_TRIES,
  selectedCountry: {} as ICountry | null,
  guessedCountries: new Set<ICountry["name"]>(), // or just collect country.
  state: GameState.Running,
});

// TODO: Add local support:
// useEffect(() => {
//   const fetchData = async () => {
//     const { countries } = await import("@/lib/data/countries.json");
//     setGameState((state) => produce(state, (draft) => { draft.countries = countries; }));
//   };
//
//   fetchData();
// }, []);

/** `FlagGuessingGame` component renders the flag guessing game.
 *
 * @returns {JSX.Element}
 */
function FlagGuessingGame(): JSX.Element {
  const [guess, setGuess] = useState<ICountry["name"]>("");
  // const selectRef = useRef<null | HTMLSelectElement>(null);

  const { toast, dismiss } = useToast();

  const [gameState, setGameState] = useAtom(gameStateAtom);

  // const { searchResults, isLoading, error, query, setQuery } = useCountrySearch();

  /////////////////////////////////////////////////////////////////////////////
  // REGION_START: GAME LOGIC
  /////////////////////////////////////////////////////////////////////////////

  // Select a random countryfrom the list of countries.
  function selectRandomCountry() {
    const randomCountry =
      gameState.countries[
        Math.floor(Math.random() * gameState.countries.length)
      ];
    setGameState(
      produce((draft) => {
        draft.selectedCountry = randomCountry;
      })
    );
  } // NOTE: The state must be manually updated before this component is rendered.

  // Check if the guessed country matches the selected country.
  function checkGuessCountry() {
    const guessedCountry = guess.trim().toLowerCase();
    if (guessedCountry === "") {
      toast({
        title: "Please enter a country name",
      });
      return;
    }
    const selectedCountry = gameState.selectedCountry?.name
      .trim()
      .toLowerCase();
    if (guessedCountry === selectedCountry) {
      setGameState(
        produce((draft) => {
          draft.state = GameState.Won;
        })
      );

      toast({ title: "You won!" });

      resetGame();
    } else {
      // Get an instance of guessedCountries and allocate/add new guessedCountry.
      const guessedCountrySet = new Set<string>(gameState.guessedCountries);
      guessedCountrySet.add(guessedCountry);
      const triesRemaining = gameState.triesRemaining - 1;
      if (triesRemaining === 0) {
        setGameState(
          produce((draft) => {
            draft.state = GameState.Lost;
            draft.triesRemaining = triesRemaining;
            draft.guessedCountries = guessedCountrySet;
          })
        );

        toast({ title: "You lost!" });

        resetGame();
      } else {
        setGameState(
          produce((draft) => {
            draft.triesRemaining = triesRemaining;
            draft.guessedCountries = guessedCountrySet;
          })
        );
      }
    }

    setGuess(""); // Reset the guess.
  } // end of selectRandomCountry.

  function processTurnAndClear() {
    checkGuessCountry();
    // setQuery("");
    setGuess("");
  }

  // Reset the game.
  function resetGame(timeout: number = 5000) {
    setTimeout(() => {
      toast({ title: "Resetting gameâ€¦", duration: 4000 });
      setGameState(
        produce((draft) => {
          draft.triesRemaining = MAX_TRIES;
          draft.guessedCountries = new Set<string>();
          draft.state = GameState.Running;
        })
      );

      selectRandomCountry();

      toast({ title: "Game reset", duration: 1000 });
    }, timeout);
  }

  /////////////////////////////////////////////////////////////////////////////
  // REGION_END: GAME LOGIC
  /////////////////////////////////////////////////////////////////////////////

  /////////////////////////////////////////////////////////////////////////////
  // REGION_START: GAME EVENT HANDLERS
  /////////////////////////////////////////////////////////////////////////////

  // TODO: implement combobox user event handling and utilize `processTurnAndClear`
  function handleComboSelect(value: string) {
    setGuess(value);
    checkGuessCountry();
    processTurnAndClear();
  }
  /////////////////////////////////////////////////////////////////////////////
  // REGION_END: GAME EVENT HANDLERS
  /////////////////////////////////////////////////////////////////////////////

  /////////////////////////////////////////////////////////////////////////////
  // REGION_START: GAME UI RENDERING REACT COMPONENT
  /////////////////////////////////////////////////////////////////////////////

  // Get the list of remaining tries.
  const triesRemaining = gameState.triesRemaining;

  // Get the list of guessed countries.
  const guessedCountries = Array.from(gameState.guessedCountries);

  const randomCountry = gameState.selectedCountry;

  const { flag, flags } = randomCountry || gameState.selectedCountry || {};
  const imageUrl =
    flag ||
    flags?.png ||
    "/assets/placeholders/flag.jpg" ||
    require("../public/assets/placeholders/flag.jpg");

  return (
    <section className="grid gap-4 justify-center">
      <Heading
        color={"default"}
        fontWeight={"bold"}
        variant="h1"
        className="flex text-2xl lg:text-4xl justify-center uppercase"
      >
        Guess the country
      </Heading>
      {/* Flag ratio is commonly 3/2 or 2/1 : https://en.wikipedia.org/wiki/List_of_aspect_ratios_of_national_flags  */}
      <div className="py-2 mx-auto w-[250px]">
        <AspectRatio ratio={3 / 2}>
          <Image // fill
            width={250}
            height={250}
            src={imageUrl}
            alt={randomCountry?.name ?? "Flag"}
            className={`rounded-md shadow w-[250px] aspect-video object-cover`}
          />
        </AspectRatio>
      </div>

      <div className="grid relative rounded-lg outline outline-slate-200 dark:outline-slate-700 overflow-clip">
        <Button
          onClick={checkGuessCountry}
          className="rounded-none"
          variant="default"
        >
          Guess
        </Button>
        <Button
          onClick={selectRandomCountry}
          className="rounded-none"
          variant="outline"
        >
          Skip
        </Button>

        {/* <CommandCombobox /> */}
        <CommandCombobox
          // options={gameState.countries.map((country) => country.name)}
          options={gameState.countries}
          onSelect={handleComboSelect}
          value={guess}
          setGuess={setGuess}
          placeholder="Select a country"
        />
      </div>

      <>
        {Array.from(guessedCountries).map((guessed, idxGuessed) => (
          <Heading
            key={`guessed-${guessed}-${idxGuessed}-${gameState.selectedCountry?.name}`}
            className="leading-none my-0 py-0 tracking-widest"
          >
            <>
              {guessed &&
                guessed.split("").map((char, i) => (
                  <span
                    key={`char-${i}-${char}-${idxGuessed}-${guessed.length}`}
                    className={
                      gameState.selectedCountry?.name.includes(char)
                        ? "text-green-500"
                        : ""
                    }
                  >
                    {char}
                  </span>
                ))}
            </>
          </Heading>
        ))}
      </>

      {/* debug only*/}
      <div className="relative">
        <div className="grid opacity-40 grid-flow-col! absolute top-4 text-xs space-x-4! justify-center">
          <p>Tries Remaining: {triesRemaining}</p>
          <p>Guessed Countries: {guessedCountries.join(", ")}</p>
          {gameState.state === GameState.Won && (
            <h2 className="sr-only">You won!</h2>
          )}
          {gameState.state === GameState.Lost && (
            <h2 className="sr-only">You lost!</h2>
          )}
          <pre className="hidden!">
            {" "}
            {gameState.selectedCountry?.name} <br />{" "}
            {JSON.stringify(guess, null, 2)} <br />{" "}
            <div className="hidden">{JSON.stringify(gameState, null, 2)}</div>{" "}
          </pre>
        </div>
      </div>
    </section>
  );

  /////////////////////////////////////////////////////////////////////////////
  // REGION_END: GAME UI RENDERING REACT COMPONENT
  /////////////////////////////////////////////////////////////////////////////
}

type CommandComboboxProps = {
  options: ICountry[]; // all countries available.
  onSelect: (value: string) => void; // used to setGuess(value) and checkCountryGuess.
  value: string; // guess.
  setGuess: (value: string) => void; // used to setGuess(value).
  placeholder?: string;

  // options={gameState.countries.map((country) => country.name)}
  // onChange={handleComboChange}
  // value={guess}
  // placeholder="Select a country"
};

/**
 * A CommandCombobox component that allows the user to search and select a country.
 * @remarks
 * This component uses the useQueryAllCountries hook to fetch the list of countries.
 * It renders a button that displays a dropdown of the list of countries in a Command UI.
 * The user can search for a country by typing in the input box and select a country by clicking on it.
 * @returns The CommandCombobox component.
 * @beta
 */
function CommandCombobox({
  options: data,
  onSelect,
  value: guess,
  setGuess,
  placeholder,
}: CommandComboboxProps) {
  const [open, setOpen] = useState(false);
  const [selectedOption, setSelectedOption] = useState("");
  const [value, setValue] = useState("");

  const { toast } = useToast();

  const [gameState, setGameState] = useAtom(gameStateAtom);

  // const { data, isLoading, error } = useQueryAllCountries();

  /**
    Handles the selection of a country and updates the game state and the toast message
    @param currentValue - the current value of the input field
    @param country - the selected country object
    */
  function handleOptionSelect(
    currentValue: string | React.SetStateAction<string>,
    country: ICountry
  ) {
    // const guessedCountriesSet = new Set<string>(gameState.guessedCountries);
    // guessedCountriesSet.add(country.name);

    setSelectedOption(currentValue === value ? "" : country.name); // Setting country.name as it is capitalized, while radix it seems b.t.s. lowercases currentValue or we could have used it instead of country.name.
    setValue(currentValue === value ? "" : currentValue); // Reset the search value.
    setOpen(false);

    // const updatedGameState = produce(gameState, (draft) => {
    //   draft.state = GameState.Lost;
    //   draft.triesRemaining--;
    //   draft.guessedCountries = guessedCountriesSet;
    // });
    // setGameState(updatedGameState);

    // const guessedCountries = Array.from(guessedCountriesSet);
    // toast({
    //   title: JSON.stringify(guessedCountries, null, 2),
    //   description: updatedGameState.triesRemaining,
    // });
    setGuess(country.name);
    toast({ title: country.name });
    onSelect(country.name);
  }
  useEffect(() => {
    setGuess(selectedOption);
  }, [value]);

  /**

    Checks if the selected country is already guessed
    @param country - the selected country object
    @returns A boolean indicating whether the country is already guessed
    */
  function isCountryAlreadyGuessed(country: ICountry): boolean {
    return gameState.guessedCountries.has(country.name);
  }

  // Display a loading spinner while data is being fetched.
  // if (isLoading) { return <div>Loading...</div>; }

  // Display an error message if there was an error fetching the data.
  // if (error instanceof Error) { return <div>Error: {error.message}</div>; }

  return (
    <div className="grid">
      <Popover open={open} onOpenChange={setOpen}>
        <PopoverTrigger asChild>
          <Button
            variant="outline"
            role="combobox"
            aria-expanded={open}
            className="min-w-[200px] justify-between"
          >
            {selectedOption || "Select a countryâ€¦"}
            <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
          </Button>
        </PopoverTrigger>
        <PopoverContent className="min-w-[200px] w-full max-h-[350px]! p-0">
          <Command>
            {guess}
            <CommandInput
              onValueChange={(search) => {
                setValue(search);
                setOpen(true);
                setGuess(search);
              }}
              placeholder="Search a countryâ€¦"
            />
            <CommandEmpty>No countries found.</CommandEmpty>
            {data ? (
              <CommandGroup>
                <ScrollArea className="h-[200px] w-[350px] rounded-md border p-4">
                  {data.map((country, idxCountry) => (
                    <CommandItem
                      aria-disabled={isCountryAlreadyGuessed(country)}
                      disabled={isCountryAlreadyGuessed(country)}
                      key={`${country.alpha3Code}-${idxCountry}-countryItem`}
                      onSelect={(value) => handleOptionSelect(value, country)}
                      className="disabled:opacity-70"
                    >
                      <Check
                        className={cn(
                          "mr-2 h-4 w-4", // selectedOption === country.name // selectedOption === country.name.toLowerCase() ||
                          isCountryAlreadyGuessed(country) ||
                            selectedOption === country.name
                            ? "opacity-100"
                            : "opacity-0"
                        )}
                      />
                      {country.name}
                    </CommandItem>
                  ))}
                </ScrollArea>
              </CommandGroup>
            ) : null}
          </Command>
        </PopoverContent>
      </Popover>
    </div>
  );
}

export { FlagGuessingGame, gameStateAtom, GameState };

// function CommandCombobox(): React.ReactElement {
//   const [isOpen, setIsOpen] = React.useState(false);
//   const [selectedOption, setSelectedOption] = React.useState<string>("");
//   const [searchValue, setSearchValue] = React.useState<string>("");

//   const {
//     data: countries,
//     isLoading: isCountriesLoading,
//     error: countriesError,
//   } = useQueryAllCountries();

//   const handleSearchValueChange = (newValue: string): void => {
//     setSearchValue(newValue);
//     setIsOpen(true);
//   };

//   const handleCountrySelect = (countryName: string): void => {
//     const isSelected = selectedOption === countryName;
//     setSelectedOption(isSelected ? "" : countryName);
//     setSearchValue(isSelected ? "" : countryName);
//     setIsOpen(false);
//   };

//   const renderCountries = (): React.ReactElement | null => {
//     if (!countries) {
//       return null;
//     }

//     const filteredCountries = countries.filter((country) =>
//       country.name.toLowerCase().includes(searchValue.toLowerCase())
//     );

//     if (filteredCountries.length === 0) {
//       return <CommandEmpty>No countries found.</CommandEmpty>;
//     }

//     return (
//       <ScrollArea className="h-[200px] w-[350px] rounded-md border p-4">
//         {filteredCountries.map((country) => (
//           <CommandItem
//             key={country.alpha3Code}
//             onSelect={() => handleCountrySelect(country.name)}
//           >
//             <Check
//               className={`mr-2 h-4 w-4 ${
//                 selectedOption === country.name ? "opacity-100" : "opacity-0"
//               }`}
//             />
//             {country.name}
//           </CommandItem>
//         ))}
//       </ScrollArea>
//     );
//   };

//   const renderLoading = (): React.ReactElement => <div>Loading...</div>;

//   const renderError = (): React.ReactElement => (
//     <div>Error: {countriesError?.message}</div>
//   );

//   return (
//     <div className="grid">
//       <Popover open={isOpen} onOpenChange={setIsOpen}>
//         <PopoverTrigger asChild>
//           <Button
//             variant="outline"
//             role="combobox"
//             aria-expanded={isOpen}
//             className="min-w-[200px] justify-between"
//           >
//             {selectedOption || "Select a country..."}
//             <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
//           </Button>
//         </PopoverTrigger>
//         <PopoverContent className="min-w-[200px] w-full max-h-[350px]! p-0">
//           <Command>
//             <CommandInput
//               onValueChange={handleSearchValueChange}
//               placeholder="Search a country..."
//             />
//             {isCountriesLoading
//               ? renderLoading()
//               : countriesError
//               ? renderError()
//               : renderCountries()}
//           </Command>
//         </PopoverContent>
//       </Popover>
//     </div>
//   );
// }

/////////////////////////////////////////////////////////////////////////////
// REGION_START: GAME EVENT HANDLERS
/////////////////////////////////////////////////////////////////////////////

// function handleInputOnChange(e: ChangeEvent<HTMLInputElement>) {
//   e.preventDefault();
//   setQuery(e.currentTarget.value);
//   setGuess(e.target.value);
// }

// function handleSelectChange(event: ChangeEvent<HTMLSelectElement>) {
//   event.preventDefault();
//   const selectedOptions = Array.from(
//     event?.target.selectedOptions,
//     (option) => option.value
//   );
//   const alpha3Code = selectedOptions[0];
//
//   if (!gameState.countries) {
//     toast({
//       title: ` Country list is empty.`,
//     });
//     return;
//   }
//   const c = gameState.countries.find(
//     (country) => country.alpha3Code === alpha3Code
//   )?.name;
//   if (!c) {
//     toast({
//       title: `Cannot find country with alpha3Code: ${alpha3Code}`,
//     });
//     return;
//   }
//   setGuess(c);
// }

// function handleSelectKeyPress(event: KeyboardEvent<HTMLSelectElement>) {
//   if (event.key === "Enter") {
//     event.preventDefault();
//     const alpha3Code = selectRef.current?.value;
//
//     if (!gameState.countries) {
//       toast({
//         title: ` Country list is empty.`,
//       });
//       return;
//     }
//     const c = gameState.countries.find(
//       (country) => country.alpha3Code === alpha3Code
//     )?.name;
//     if (!c) {
//       toast({
//         title: `Cannot find country with alpha3Code: ${alpha3Code}`,
//       });
//       return;
//     }
//     setGuess(c);
//     toast({
//       title: `Guessing ${c}â€¦`,
//       duration: 200,
//     });
//     processTurnAndClear();
//   } else {
//     return;
//   }
// }

// function handleOptionClick(
//   event: MouseEvent<HTMLOptionElement, globalThis.MouseEvent>
// ) {
//   event.preventDefault();
//   const alpha3Code = event.currentTarget.value;
//   const c = gameState.countries.find(
//     (country) => country.alpha3Code === alpha3Code
//   )?.name;
//
//   if (!c) {
//     toast({
//       title: `Cannot find country with alpha3Code: ${alpha3Code}`,
//     });
//     return;
//   }
//
//   setGuess(c);
//   toast({
//     title: `Guessing ${c}â€¦`,
//     duration: 200,
//   });
//   processTurnAndClear();
// }

// function handleSelectCountryInputOptionOnChange(
//   e: ChangeEvent<HTMLInputElement>
// ) {
//   e.preventDefault();
//   const value = e.target.value;
//   toast({ title: value });
//   setQuery(e.currentTarget.value);
//   setGuess(e.target.value);
// }

// function handleInputOnBlur(e: FocusEvent<HTMLInputElement, Element>) {
//   e.preventDefault();
//   const value = e.target.value;
//   toast({ title: `onBlur: ${value}` });
// }

/////////////////////////////////////////////////////////////////////////////
// REGION_END: GAME EVENT HANDLERS
/////////////////////////////////////////////////////////////////////////////

// function getCountryInfo(countries: ICountry[], alpha3Code: string) {
//   return countries.find((c) => c.alpha3Code === alpha3Code);
// }

// type CountryOptionProps = {
//   item: ICountry;
//   score: number;
//   index: number | string;
// };

// function CountryOption({
//   item,
//   score,
//   index,
// }: CountryOptionProps): JSX.Element {
//   const value = item.alpha3Code;
//   // const value = encodeURIComponent(JSON.stringify(item));
//   const label = `${item.name}  (${(score * 100).toFixed(0)})`;
//   const id = `country-option-${item.alpha3Code}-${index}`;

//   return (
//     <option
//       id={id}
//       value={value}
//       key={`country-option-${item.alpha3Code}-${index}`}
//     >
//       {label}
//     </option>
//   );
// }

// function CountryOptionsList({
//   searchResults,
// }: {
//   searchResults: SearchResult[] | null;
// }): JSX.Element {
//   const options = searchResults
//     ?.filter((result) => {
//       const score = (result.score ?? -1) * 100;
//       return score >= 0 && score <= 400 && result.score;
//     })
//     .map((result, index) => (
//       <CountryOption
//         key={`country-option-${result.item.alpha3Code}-${index}`}
//         item={result.item}
//         score={result.score ?? -1}
//         index={index}
//       />
//     ));

//   return (
//     <div className="grid h-full min-h-[300px] gap-1 overflow-y-auto">
//       <datalist id="countries">{options}</datalist>
//     </div>
//   );
// }
